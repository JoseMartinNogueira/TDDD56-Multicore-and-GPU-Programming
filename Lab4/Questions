1-QUESTION: How many cores will simple.cu use, max, as written? How many SMs?
	16-2
	8cores in 1SM


2-QUESTION: Is the calculated square root identical to what the CPU calculates? Should we assume that this is always the case?
	No, the hardware is not the same so the way to calculate the sqrt shoudnt be the same. Yes.
	Usually they have different precision.


3-QUESTION: How do you calculate the index in the array, using 2-dimensional blocks?
	int idx = blockIdx.x * blockDim.x + threadIdx.x;
	int idy = blockIdx.y * blockDim.y + threadIdx.y;
	int index = idx + idy * N;


4-QUESTION: What happens if you use too many threads per block?
	The results become unpredictable.


5-QUESTION: At what data size is the GPU faster than the CPU?
	blocksize=16

	GPU-16	0.03462400		CPU-16	0.004
	GPU-32	0.03260800		CPU-32	0.014
	GPU-64	0.03148800		CPU-64	0.066
	GPU-128	0.03641600		CPU-128	0.338

	between 32 and 64

6-QUESTION: What block size seems like a good choice? Compared to what?
	answer in the next	

7-QUESTION: Write down your data size, block size and timing data for the best GPU performance you can get.
	N=1024
	blocksize=512x512	0.00969600
	blocksize=256x256	0.01036800
	blocksize=128x128	0.00956800
	blocksize=64x64		0.00864000

8-QUESTION: How much performance did you lose by making data accesses non-coalesced?
	time N=16 block=16 0.05011200 one time and a half

9-QUESTION: What were the main changes in order to make the Mandelbrot run in CUDA?
	for loop
	kernel function
	__device__ to functions

10-QUESTION: How many blocks and threads did you use?
	DIM=512 / blocksize=16 = 32blocks

11-QUESTION: When you use the Complex class, what modifier did you have to use on the methods?
	__device__

12-QUESTION: What performance did you get? How does that compare to the CPU solution?
	CPU
125.241000
100.767000
234.633000
280.975000
233.601000
309.634000
453.887000
606.050000
589.547000
573.947000
126.334000
	GPU
0.104352
0.404320
0.186208
0.507360
0.459200
0.455840
0.509856
0.295456
0.427520
0.533984
0.472800
0.503616
0.684128
0.602432

13-QUESTION: What performance did you get with float vs double precision?
 	double
0.596128
0.853024
0.994592
1.336512
1.272224
1.541920
1.730752
1.721248
2.107232
2.613760
3.158176
3.180608
3.349792
3.587040
3.730304
3.366784
3.282432
2.658176
2.119040
1.008672

14-QUESTION: In Lab 1, load balancing was an important issue. Is that an issue here? Why/why not?
	Not important because there are a lot of cores